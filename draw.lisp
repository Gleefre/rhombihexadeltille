(in-package #:rht/draw)

(defun real-coords (x y)
  (list (* (+ x (/ y 2))
           (+ 1 (sqrt 3)))
        (* (/ y 2)
           (+ 3 (sqrt 3)))))

(defun node-shape (x y &aux (dx (mod x 1)) (dy (mod y 1)))
  (case (+ dx (* 3 dy))
    (  0 '(6  90))
    (1/2 '(4  45))
    (3/2 '(4  15))
    (  2 '(4  75))
    (4/3 '(3  90))
    (8/3 '(3 270))))

(defun ngon-scale (n)
  (case n
    (4 (sqrt 1/2))
    (3 (sqrt 1/3))
    (6          1)))

(defun draw-node (x y node side)
  (destructuring-bind (n angle) (node-shape x y)
    (destructuring-bind (x y) (real-coords x y)
      (let ((x (* side x))
            (y (* side y))
            (side (* side (ngon-scale n))))
        (ngon n x y side side angle)
        (when (node-inside node)
          (with-pen (make-pen :fill (case (node-inside node)
                                      (:red +red+)
                                      (:yellow +yellow+)
                                      (:green +green+)
                                      (:blue +blue+)
                                      (:trash +black+)))
            (circle x y 5)))
        (when (node-outside node)
          (with-pen (make-pen :stroke (case (node-outside node)
                                        (:red +red+)
                                        (:yellow +yellow+)
                                        (:green +green+)
                                        (:blue +blue+)
                                        (:bin +black+))
                              :weight 5)
            (ngon n x y (- side 10) (- side 10) angle)))))))

(defsketch level ((map (level 1))
                  (width 800)
                  (height 800))
  (translate 100 100)
  (maphash (lambda (c node) (draw-node (car c) (cadr c) node 50))
           map)
  (if (win? map) (text "WIN! :)" 0 100)))

(defmethod kit.sdl2:keyboard-event ((app level) st ts but keysym)
  (when (eq st :keydown)
    (rotate (slot-value app 'map) 0 0)))

(make-instance 'level)
